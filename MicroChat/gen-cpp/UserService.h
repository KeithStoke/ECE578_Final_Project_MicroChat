/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserService_H
#define UserService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "microchat_types.h"

namespace microchat {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserServiceIf {
 public:
  virtual ~UserServiceIf() {}
  virtual void ping(std::string& _return, const int32_t id) = 0;
  virtual void Login(std::string& _return, const std::string& username, const std::string& password) = 0;
  virtual void CreateUser(std::string& _return, const std::string& username, const std::string& name, const std::string& password) = 0;
  virtual void GetUserID(std::string& _return, const std::string& username) = 0;
  virtual void Logout(std::string& _return, const std::string& username) = 0;
};

class UserServiceIfFactory {
 public:
  typedef UserServiceIf Handler;

  virtual ~UserServiceIfFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserServiceIf* /* handler */) = 0;
};

class UserServiceIfSingletonFactory : virtual public UserServiceIfFactory {
 public:
  UserServiceIfSingletonFactory(const ::std::shared_ptr<UserServiceIf>& iface) : iface_(iface) {}
  virtual ~UserServiceIfSingletonFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<UserServiceIf> iface_;
};

class UserServiceNull : virtual public UserServiceIf {
 public:
  virtual ~UserServiceNull() {}
  void ping(std::string& /* _return */, const int32_t /* id */) {
    return;
  }
  void Login(std::string& /* _return */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void CreateUser(std::string& /* _return */, const std::string& /* username */, const std::string& /* name */, const std::string& /* password */) {
    return;
  }
  void GetUserID(std::string& /* _return */, const std::string& /* username */) {
    return;
  }
  void Logout(std::string& /* _return */, const std::string& /* username */) {
    return;
  }
};

typedef struct _UserService_ping_args__isset {
  _UserService_ping_args__isset() : id(false) {}
  bool id :1;
} _UserService_ping_args__isset;

class UserService_ping_args {
 public:

  UserService_ping_args(const UserService_ping_args&);
  UserService_ping_args& operator=(const UserService_ping_args&);
  UserService_ping_args() : id(0) {
  }

  virtual ~UserService_ping_args() noexcept;
  int32_t id;

  _UserService_ping_args__isset __isset;

  void __set_id(const int32_t val);

  bool operator == (const UserService_ping_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const UserService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_ping_pargs {
 public:


  virtual ~UserService_ping_pargs() noexcept;
  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_ping_result__isset {
  _UserService_ping_result__isset() : success(false) {}
  bool success :1;
} _UserService_ping_result__isset;

class UserService_ping_result {
 public:

  UserService_ping_result(const UserService_ping_result&);
  UserService_ping_result& operator=(const UserService_ping_result&);
  UserService_ping_result() : success() {
  }

  virtual ~UserService_ping_result() noexcept;
  std::string success;

  _UserService_ping_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const UserService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_ping_presult__isset {
  _UserService_ping_presult__isset() : success(false) {}
  bool success :1;
} _UserService_ping_presult__isset;

class UserService_ping_presult {
 public:


  virtual ~UserService_ping_presult() noexcept;
  std::string* success;

  _UserService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserService_Login_args__isset {
  _UserService_Login_args__isset() : username(false), password(false) {}
  bool username :1;
  bool password :1;
} _UserService_Login_args__isset;

class UserService_Login_args {
 public:

  UserService_Login_args(const UserService_Login_args&);
  UserService_Login_args& operator=(const UserService_Login_args&);
  UserService_Login_args() : username(), password() {
  }

  virtual ~UserService_Login_args() noexcept;
  std::string username;
  std::string password;

  _UserService_Login_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const UserService_Login_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const UserService_Login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_Login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_Login_pargs {
 public:


  virtual ~UserService_Login_pargs() noexcept;
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_Login_result__isset {
  _UserService_Login_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserService_Login_result__isset;

class UserService_Login_result {
 public:

  UserService_Login_result(const UserService_Login_result&);
  UserService_Login_result& operator=(const UserService_Login_result&);
  UserService_Login_result() : success() {
  }

  virtual ~UserService_Login_result() noexcept;
  std::string success;
  ServiceException se;

  _UserService_Login_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const ServiceException& val);

  bool operator == (const UserService_Login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserService_Login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_Login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_Login_presult__isset {
  _UserService_Login_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserService_Login_presult__isset;

class UserService_Login_presult {
 public:


  virtual ~UserService_Login_presult() noexcept;
  std::string* success;
  ServiceException se;

  _UserService_Login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserService_CreateUser_args__isset {
  _UserService_CreateUser_args__isset() : username(false), name(false), password(false) {}
  bool username :1;
  bool name :1;
  bool password :1;
} _UserService_CreateUser_args__isset;

class UserService_CreateUser_args {
 public:

  UserService_CreateUser_args(const UserService_CreateUser_args&);
  UserService_CreateUser_args& operator=(const UserService_CreateUser_args&);
  UserService_CreateUser_args() : username(), name(), password() {
  }

  virtual ~UserService_CreateUser_args() noexcept;
  std::string username;
  std::string name;
  std::string password;

  _UserService_CreateUser_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_name(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const UserService_CreateUser_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const UserService_CreateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_CreateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_CreateUser_pargs {
 public:


  virtual ~UserService_CreateUser_pargs() noexcept;
  const std::string* username;
  const std::string* name;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_CreateUser_result__isset {
  _UserService_CreateUser_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserService_CreateUser_result__isset;

class UserService_CreateUser_result {
 public:

  UserService_CreateUser_result(const UserService_CreateUser_result&);
  UserService_CreateUser_result& operator=(const UserService_CreateUser_result&);
  UserService_CreateUser_result() : success() {
  }

  virtual ~UserService_CreateUser_result() noexcept;
  std::string success;
  ServiceException se;

  _UserService_CreateUser_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const ServiceException& val);

  bool operator == (const UserService_CreateUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserService_CreateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_CreateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_CreateUser_presult__isset {
  _UserService_CreateUser_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserService_CreateUser_presult__isset;

class UserService_CreateUser_presult {
 public:


  virtual ~UserService_CreateUser_presult() noexcept;
  std::string* success;
  ServiceException se;

  _UserService_CreateUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserService_GetUserID_args__isset {
  _UserService_GetUserID_args__isset() : username(false) {}
  bool username :1;
} _UserService_GetUserID_args__isset;

class UserService_GetUserID_args {
 public:

  UserService_GetUserID_args(const UserService_GetUserID_args&);
  UserService_GetUserID_args& operator=(const UserService_GetUserID_args&);
  UserService_GetUserID_args() : username() {
  }

  virtual ~UserService_GetUserID_args() noexcept;
  std::string username;

  _UserService_GetUserID_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const UserService_GetUserID_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const UserService_GetUserID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_GetUserID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_GetUserID_pargs {
 public:


  virtual ~UserService_GetUserID_pargs() noexcept;
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_GetUserID_result__isset {
  _UserService_GetUserID_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserService_GetUserID_result__isset;

class UserService_GetUserID_result {
 public:

  UserService_GetUserID_result(const UserService_GetUserID_result&);
  UserService_GetUserID_result& operator=(const UserService_GetUserID_result&);
  UserService_GetUserID_result() : success() {
  }

  virtual ~UserService_GetUserID_result() noexcept;
  std::string success;
  ServiceException se;

  _UserService_GetUserID_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const ServiceException& val);

  bool operator == (const UserService_GetUserID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserService_GetUserID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_GetUserID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_GetUserID_presult__isset {
  _UserService_GetUserID_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserService_GetUserID_presult__isset;

class UserService_GetUserID_presult {
 public:


  virtual ~UserService_GetUserID_presult() noexcept;
  std::string* success;
  ServiceException se;

  _UserService_GetUserID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserService_Logout_args__isset {
  _UserService_Logout_args__isset() : username(false) {}
  bool username :1;
} _UserService_Logout_args__isset;

class UserService_Logout_args {
 public:

  UserService_Logout_args(const UserService_Logout_args&);
  UserService_Logout_args& operator=(const UserService_Logout_args&);
  UserService_Logout_args() : username() {
  }

  virtual ~UserService_Logout_args() noexcept;
  std::string username;

  _UserService_Logout_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const UserService_Logout_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const UserService_Logout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_Logout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_Logout_pargs {
 public:


  virtual ~UserService_Logout_pargs() noexcept;
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_Logout_result__isset {
  _UserService_Logout_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserService_Logout_result__isset;

class UserService_Logout_result {
 public:

  UserService_Logout_result(const UserService_Logout_result&);
  UserService_Logout_result& operator=(const UserService_Logout_result&);
  UserService_Logout_result() : success() {
  }

  virtual ~UserService_Logout_result() noexcept;
  std::string success;
  ServiceException se;

  _UserService_Logout_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const ServiceException& val);

  bool operator == (const UserService_Logout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserService_Logout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_Logout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_Logout_presult__isset {
  _UserService_Logout_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserService_Logout_presult__isset;

class UserService_Logout_presult {
 public:


  virtual ~UserService_Logout_presult() noexcept;
  std::string* success;
  ServiceException se;

  _UserService_Logout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserServiceClient : virtual public UserServiceIf {
 public:
  UserServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return, const int32_t id);
  void send_ping(const int32_t id);
  void recv_ping(std::string& _return);
  void Login(std::string& _return, const std::string& username, const std::string& password);
  void send_Login(const std::string& username, const std::string& password);
  void recv_Login(std::string& _return);
  void CreateUser(std::string& _return, const std::string& username, const std::string& name, const std::string& password);
  void send_CreateUser(const std::string& username, const std::string& name, const std::string& password);
  void recv_CreateUser(std::string& _return);
  void GetUserID(std::string& _return, const std::string& username);
  void send_GetUserID(const std::string& username);
  void recv_GetUserID(std::string& _return);
  void Logout(std::string& _return, const std::string& username);
  void send_Logout(const std::string& username);
  void recv_Logout(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<UserServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetUserID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Logout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserServiceProcessor(::std::shared_ptr<UserServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &UserServiceProcessor::process_ping;
    processMap_["Login"] = &UserServiceProcessor::process_Login;
    processMap_["CreateUser"] = &UserServiceProcessor::process_CreateUser;
    processMap_["GetUserID"] = &UserServiceProcessor::process_GetUserID;
    processMap_["Logout"] = &UserServiceProcessor::process_Logout;
  }

  virtual ~UserServiceProcessor() {}
};

class UserServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserServiceProcessorFactory(const ::std::shared_ptr< UserServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< UserServiceIfFactory > handlerFactory_;
};

class UserServiceMultiface : virtual public UserServiceIf {
 public:
  UserServiceMultiface(std::vector<std::shared_ptr<UserServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<UserServiceIf> > ifaces_;
  UserServiceMultiface() {}
  void add(::std::shared_ptr<UserServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(std::string& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return, id);
    }
    ifaces_[i]->ping(_return, id);
    return;
  }

  void Login(std::string& _return, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Login(_return, username, password);
    }
    ifaces_[i]->Login(_return, username, password);
    return;
  }

  void CreateUser(std::string& _return, const std::string& username, const std::string& name, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateUser(_return, username, name, password);
    }
    ifaces_[i]->CreateUser(_return, username, name, password);
    return;
  }

  void GetUserID(std::string& _return, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetUserID(_return, username);
    }
    ifaces_[i]->GetUserID(_return, username);
    return;
  }

  void Logout(std::string& _return, const std::string& username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Logout(_return, username);
    }
    ifaces_[i]->Logout(_return, username);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserServiceConcurrentClient : virtual public UserServiceIf {
 public:
  UserServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  UserServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return, const int32_t id);
  int32_t send_ping(const int32_t id);
  void recv_ping(std::string& _return, const int32_t seqid);
  void Login(std::string& _return, const std::string& username, const std::string& password);
  int32_t send_Login(const std::string& username, const std::string& password);
  void recv_Login(std::string& _return, const int32_t seqid);
  void CreateUser(std::string& _return, const std::string& username, const std::string& name, const std::string& password);
  int32_t send_CreateUser(const std::string& username, const std::string& name, const std::string& password);
  void recv_CreateUser(std::string& _return, const int32_t seqid);
  void GetUserID(std::string& _return, const std::string& username);
  int32_t send_GetUserID(const std::string& username);
  void recv_GetUserID(std::string& _return, const int32_t seqid);
  void Logout(std::string& _return, const std::string& username);
  int32_t send_Logout(const std::string& username);
  void recv_Logout(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
