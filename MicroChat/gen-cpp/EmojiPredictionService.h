/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EmojiPredictionService_H
#define EmojiPredictionService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "microchat_types.h"

namespace microchat {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class EmojiPredictionServiceIf {
 public:
  virtual ~EmojiPredictionServiceIf() {}
  virtual void ping(std::string& _return, const std::string& text) = 0;
  virtual void GetEmoji(Emoji& _return, const std::string& text) = 0;
};

class EmojiPredictionServiceIfFactory {
 public:
  typedef EmojiPredictionServiceIf Handler;

  virtual ~EmojiPredictionServiceIfFactory() {}

  virtual EmojiPredictionServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EmojiPredictionServiceIf* /* handler */) = 0;
};

class EmojiPredictionServiceIfSingletonFactory : virtual public EmojiPredictionServiceIfFactory {
 public:
  EmojiPredictionServiceIfSingletonFactory(const ::std::shared_ptr<EmojiPredictionServiceIf>& iface) : iface_(iface) {}
  virtual ~EmojiPredictionServiceIfSingletonFactory() {}

  virtual EmojiPredictionServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(EmojiPredictionServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<EmojiPredictionServiceIf> iface_;
};

class EmojiPredictionServiceNull : virtual public EmojiPredictionServiceIf {
 public:
  virtual ~EmojiPredictionServiceNull() {}
  void ping(std::string& /* _return */, const std::string& /* text */) {
    return;
  }
  void GetEmoji(Emoji& /* _return */, const std::string& /* text */) {
    return;
  }
};

typedef struct _EmojiPredictionService_ping_args__isset {
  _EmojiPredictionService_ping_args__isset() : text(false) {}
  bool text :1;
} _EmojiPredictionService_ping_args__isset;

class EmojiPredictionService_ping_args {
 public:

  EmojiPredictionService_ping_args(const EmojiPredictionService_ping_args&);
  EmojiPredictionService_ping_args& operator=(const EmojiPredictionService_ping_args&);
  EmojiPredictionService_ping_args() : text() {
  }

  virtual ~EmojiPredictionService_ping_args() noexcept;
  std::string text;

  _EmojiPredictionService_ping_args__isset __isset;

  void __set_text(const std::string& val);

  bool operator == (const EmojiPredictionService_ping_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const EmojiPredictionService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmojiPredictionService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EmojiPredictionService_ping_pargs {
 public:


  virtual ~EmojiPredictionService_ping_pargs() noexcept;
  const std::string* text;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EmojiPredictionService_ping_result__isset {
  _EmojiPredictionService_ping_result__isset() : success(false) {}
  bool success :1;
} _EmojiPredictionService_ping_result__isset;

class EmojiPredictionService_ping_result {
 public:

  EmojiPredictionService_ping_result(const EmojiPredictionService_ping_result&);
  EmojiPredictionService_ping_result& operator=(const EmojiPredictionService_ping_result&);
  EmojiPredictionService_ping_result() : success() {
  }

  virtual ~EmojiPredictionService_ping_result() noexcept;
  std::string success;

  _EmojiPredictionService_ping_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const EmojiPredictionService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EmojiPredictionService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmojiPredictionService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EmojiPredictionService_ping_presult__isset {
  _EmojiPredictionService_ping_presult__isset() : success(false) {}
  bool success :1;
} _EmojiPredictionService_ping_presult__isset;

class EmojiPredictionService_ping_presult {
 public:


  virtual ~EmojiPredictionService_ping_presult() noexcept;
  std::string* success;

  _EmojiPredictionService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _EmojiPredictionService_GetEmoji_args__isset {
  _EmojiPredictionService_GetEmoji_args__isset() : text(false) {}
  bool text :1;
} _EmojiPredictionService_GetEmoji_args__isset;

class EmojiPredictionService_GetEmoji_args {
 public:

  EmojiPredictionService_GetEmoji_args(const EmojiPredictionService_GetEmoji_args&);
  EmojiPredictionService_GetEmoji_args& operator=(const EmojiPredictionService_GetEmoji_args&);
  EmojiPredictionService_GetEmoji_args() : text() {
  }

  virtual ~EmojiPredictionService_GetEmoji_args() noexcept;
  std::string text;

  _EmojiPredictionService_GetEmoji_args__isset __isset;

  void __set_text(const std::string& val);

  bool operator == (const EmojiPredictionService_GetEmoji_args & rhs) const
  {
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const EmojiPredictionService_GetEmoji_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmojiPredictionService_GetEmoji_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EmojiPredictionService_GetEmoji_pargs {
 public:


  virtual ~EmojiPredictionService_GetEmoji_pargs() noexcept;
  const std::string* text;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EmojiPredictionService_GetEmoji_result__isset {
  _EmojiPredictionService_GetEmoji_result__isset() : success(false) {}
  bool success :1;
} _EmojiPredictionService_GetEmoji_result__isset;

class EmojiPredictionService_GetEmoji_result {
 public:

  EmojiPredictionService_GetEmoji_result(const EmojiPredictionService_GetEmoji_result&);
  EmojiPredictionService_GetEmoji_result& operator=(const EmojiPredictionService_GetEmoji_result&);
  EmojiPredictionService_GetEmoji_result() {
  }

  virtual ~EmojiPredictionService_GetEmoji_result() noexcept;
  Emoji success;

  _EmojiPredictionService_GetEmoji_result__isset __isset;

  void __set_success(const Emoji& val);

  bool operator == (const EmojiPredictionService_GetEmoji_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EmojiPredictionService_GetEmoji_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EmojiPredictionService_GetEmoji_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EmojiPredictionService_GetEmoji_presult__isset {
  _EmojiPredictionService_GetEmoji_presult__isset() : success(false) {}
  bool success :1;
} _EmojiPredictionService_GetEmoji_presult__isset;

class EmojiPredictionService_GetEmoji_presult {
 public:


  virtual ~EmojiPredictionService_GetEmoji_presult() noexcept;
  Emoji* success;

  _EmojiPredictionService_GetEmoji_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EmojiPredictionServiceClient : virtual public EmojiPredictionServiceIf {
 public:
  EmojiPredictionServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  EmojiPredictionServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return, const std::string& text);
  void send_ping(const std::string& text);
  void recv_ping(std::string& _return);
  void GetEmoji(Emoji& _return, const std::string& text);
  void send_GetEmoji(const std::string& text);
  void recv_GetEmoji(Emoji& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EmojiPredictionServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<EmojiPredictionServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EmojiPredictionServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetEmoji(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EmojiPredictionServiceProcessor(::std::shared_ptr<EmojiPredictionServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &EmojiPredictionServiceProcessor::process_ping;
    processMap_["GetEmoji"] = &EmojiPredictionServiceProcessor::process_GetEmoji;
  }

  virtual ~EmojiPredictionServiceProcessor() {}
};

class EmojiPredictionServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EmojiPredictionServiceProcessorFactory(const ::std::shared_ptr< EmojiPredictionServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< EmojiPredictionServiceIfFactory > handlerFactory_;
};

class EmojiPredictionServiceMultiface : virtual public EmojiPredictionServiceIf {
 public:
  EmojiPredictionServiceMultiface(std::vector<std::shared_ptr<EmojiPredictionServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EmojiPredictionServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<EmojiPredictionServiceIf> > ifaces_;
  EmojiPredictionServiceMultiface() {}
  void add(::std::shared_ptr<EmojiPredictionServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(std::string& _return, const std::string& text) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return, text);
    }
    ifaces_[i]->ping(_return, text);
    return;
  }

  void GetEmoji(Emoji& _return, const std::string& text) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetEmoji(_return, text);
    }
    ifaces_[i]->GetEmoji(_return, text);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class EmojiPredictionServiceConcurrentClient : virtual public EmojiPredictionServiceIf {
 public:
  EmojiPredictionServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  EmojiPredictionServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(std::string& _return, const std::string& text);
  int32_t send_ping(const std::string& text);
  void recv_ping(std::string& _return, const int32_t seqid);
  void GetEmoji(Emoji& _return, const std::string& text);
  int32_t send_GetEmoji(const std::string& text);
  void recv_GetEmoji(Emoji& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
