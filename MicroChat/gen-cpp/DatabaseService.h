/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DatabaseService_H
#define DatabaseService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "microchat_types.h"

namespace microchat {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DatabaseServiceIf {
 public:
  virtual ~DatabaseServiceIf() {}
  virtual void ping() = 0;
  virtual void WriteToDatabase(std::string& _return, const std::string& query) = 0;
  virtual void ReadFromDatabase(std::string& _return, const std::string& query) = 0;
};

class DatabaseServiceIfFactory {
 public:
  typedef DatabaseServiceIf Handler;

  virtual ~DatabaseServiceIfFactory() {}

  virtual DatabaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DatabaseServiceIf* /* handler */) = 0;
};

class DatabaseServiceIfSingletonFactory : virtual public DatabaseServiceIfFactory {
 public:
  DatabaseServiceIfSingletonFactory(const ::std::shared_ptr<DatabaseServiceIf>& iface) : iface_(iface) {}
  virtual ~DatabaseServiceIfSingletonFactory() {}

  virtual DatabaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DatabaseServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<DatabaseServiceIf> iface_;
};

class DatabaseServiceNull : virtual public DatabaseServiceIf {
 public:
  virtual ~DatabaseServiceNull() {}
  void ping() {
    return;
  }
  void WriteToDatabase(std::string& /* _return */, const std::string& /* query */) {
    return;
  }
  void ReadFromDatabase(std::string& /* _return */, const std::string& /* query */) {
    return;
  }
};


class DatabaseService_ping_args {
 public:

  DatabaseService_ping_args(const DatabaseService_ping_args&);
  DatabaseService_ping_args& operator=(const DatabaseService_ping_args&);
  DatabaseService_ping_args() {
  }

  virtual ~DatabaseService_ping_args() noexcept;

  bool operator == (const DatabaseService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DatabaseService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_ping_pargs {
 public:


  virtual ~DatabaseService_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_ping_result {
 public:

  DatabaseService_ping_result(const DatabaseService_ping_result&);
  DatabaseService_ping_result& operator=(const DatabaseService_ping_result&);
  DatabaseService_ping_result() {
  }

  virtual ~DatabaseService_ping_result() noexcept;

  bool operator == (const DatabaseService_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DatabaseService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_ping_presult {
 public:


  virtual ~DatabaseService_ping_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_WriteToDatabase_args__isset {
  _DatabaseService_WriteToDatabase_args__isset() : query(false) {}
  bool query :1;
} _DatabaseService_WriteToDatabase_args__isset;

class DatabaseService_WriteToDatabase_args {
 public:

  DatabaseService_WriteToDatabase_args(const DatabaseService_WriteToDatabase_args&);
  DatabaseService_WriteToDatabase_args& operator=(const DatabaseService_WriteToDatabase_args&);
  DatabaseService_WriteToDatabase_args() : query() {
  }

  virtual ~DatabaseService_WriteToDatabase_args() noexcept;
  std::string query;

  _DatabaseService_WriteToDatabase_args__isset __isset;

  void __set_query(const std::string& val);

  bool operator == (const DatabaseService_WriteToDatabase_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_WriteToDatabase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_WriteToDatabase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_WriteToDatabase_pargs {
 public:


  virtual ~DatabaseService_WriteToDatabase_pargs() noexcept;
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_WriteToDatabase_result__isset {
  _DatabaseService_WriteToDatabase_result__isset() : success(false) {}
  bool success :1;
} _DatabaseService_WriteToDatabase_result__isset;

class DatabaseService_WriteToDatabase_result {
 public:

  DatabaseService_WriteToDatabase_result(const DatabaseService_WriteToDatabase_result&);
  DatabaseService_WriteToDatabase_result& operator=(const DatabaseService_WriteToDatabase_result&);
  DatabaseService_WriteToDatabase_result() : success() {
  }

  virtual ~DatabaseService_WriteToDatabase_result() noexcept;
  std::string success;

  _DatabaseService_WriteToDatabase_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const DatabaseService_WriteToDatabase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_WriteToDatabase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_WriteToDatabase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_WriteToDatabase_presult__isset {
  _DatabaseService_WriteToDatabase_presult__isset() : success(false) {}
  bool success :1;
} _DatabaseService_WriteToDatabase_presult__isset;

class DatabaseService_WriteToDatabase_presult {
 public:


  virtual ~DatabaseService_WriteToDatabase_presult() noexcept;
  std::string* success;

  _DatabaseService_WriteToDatabase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_ReadFromDatabase_args__isset {
  _DatabaseService_ReadFromDatabase_args__isset() : query(false) {}
  bool query :1;
} _DatabaseService_ReadFromDatabase_args__isset;

class DatabaseService_ReadFromDatabase_args {
 public:

  DatabaseService_ReadFromDatabase_args(const DatabaseService_ReadFromDatabase_args&);
  DatabaseService_ReadFromDatabase_args& operator=(const DatabaseService_ReadFromDatabase_args&);
  DatabaseService_ReadFromDatabase_args() : query() {
  }

  virtual ~DatabaseService_ReadFromDatabase_args() noexcept;
  std::string query;

  _DatabaseService_ReadFromDatabase_args__isset __isset;

  void __set_query(const std::string& val);

  bool operator == (const DatabaseService_ReadFromDatabase_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_ReadFromDatabase_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_ReadFromDatabase_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_ReadFromDatabase_pargs {
 public:


  virtual ~DatabaseService_ReadFromDatabase_pargs() noexcept;
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_ReadFromDatabase_result__isset {
  _DatabaseService_ReadFromDatabase_result__isset() : success(false) {}
  bool success :1;
} _DatabaseService_ReadFromDatabase_result__isset;

class DatabaseService_ReadFromDatabase_result {
 public:

  DatabaseService_ReadFromDatabase_result(const DatabaseService_ReadFromDatabase_result&);
  DatabaseService_ReadFromDatabase_result& operator=(const DatabaseService_ReadFromDatabase_result&);
  DatabaseService_ReadFromDatabase_result() : success() {
  }

  virtual ~DatabaseService_ReadFromDatabase_result() noexcept;
  std::string success;

  _DatabaseService_ReadFromDatabase_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const DatabaseService_ReadFromDatabase_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_ReadFromDatabase_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_ReadFromDatabase_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_ReadFromDatabase_presult__isset {
  _DatabaseService_ReadFromDatabase_presult__isset() : success(false) {}
  bool success :1;
} _DatabaseService_ReadFromDatabase_presult__isset;

class DatabaseService_ReadFromDatabase_presult {
 public:


  virtual ~DatabaseService_ReadFromDatabase_presult() noexcept;
  std::string* success;

  _DatabaseService_ReadFromDatabase_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DatabaseServiceClient : virtual public DatabaseServiceIf {
 public:
  DatabaseServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DatabaseServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void WriteToDatabase(std::string& _return, const std::string& query);
  void send_WriteToDatabase(const std::string& query);
  void recv_WriteToDatabase(std::string& _return);
  void ReadFromDatabase(std::string& _return, const std::string& query);
  void send_ReadFromDatabase(const std::string& query);
  void recv_ReadFromDatabase(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DatabaseServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<DatabaseServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DatabaseServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_WriteToDatabase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReadFromDatabase(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DatabaseServiceProcessor(::std::shared_ptr<DatabaseServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &DatabaseServiceProcessor::process_ping;
    processMap_["WriteToDatabase"] = &DatabaseServiceProcessor::process_WriteToDatabase;
    processMap_["ReadFromDatabase"] = &DatabaseServiceProcessor::process_ReadFromDatabase;
  }

  virtual ~DatabaseServiceProcessor() {}
};

class DatabaseServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DatabaseServiceProcessorFactory(const ::std::shared_ptr< DatabaseServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< DatabaseServiceIfFactory > handlerFactory_;
};

class DatabaseServiceMultiface : virtual public DatabaseServiceIf {
 public:
  DatabaseServiceMultiface(std::vector<std::shared_ptr<DatabaseServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DatabaseServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<DatabaseServiceIf> > ifaces_;
  DatabaseServiceMultiface() {}
  void add(::std::shared_ptr<DatabaseServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void WriteToDatabase(std::string& _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->WriteToDatabase(_return, query);
    }
    ifaces_[i]->WriteToDatabase(_return, query);
    return;
  }

  void ReadFromDatabase(std::string& _return, const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadFromDatabase(_return, query);
    }
    ifaces_[i]->ReadFromDatabase(_return, query);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DatabaseServiceConcurrentClient : virtual public DatabaseServiceIf {
 public:
  DatabaseServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  DatabaseServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  void WriteToDatabase(std::string& _return, const std::string& query);
  int32_t send_WriteToDatabase(const std::string& query);
  void recv_WriteToDatabase(std::string& _return, const int32_t seqid);
  void ReadFromDatabase(std::string& _return, const std::string& query);
  int32_t send_ReadFromDatabase(const std::string& query);
  void recv_ReadFromDatabase(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
